Index: plugins/skip.c
===================================================================
--- plugins/skip.c	(revision 0)
+++ plugins/skip.c	(revision 0)
@@ -0,0 +1,203 @@
+/*
+ *  tslib/plugins/skip.c
+ *
+ * (C) 2008 by Openmoko, Inc.
+ * Author: Nelson Castillo <arhuaco at freaks-unidos.net>
+ *
+ * This file is placed under the LGPL.  Please see the file
+ * COPYING for more details.
+ *
+ * $Id$
+ *
+ * Skip filter for touchscreen values.
+ *
+ * Problem: With some drivers the first and the last sample is unreliable.
+ *
+ * Solution:
+ *
+ *  - Skip N points after pressure != 0
+ *  - Skip M points before pressure == 0
+ *  - Ignore a click if it has less than N + M points
+ *
+ * Parameters:
+ *
+ *  - nhead (means N)
+ *  - ntail (means M)
+ *
+ */
+
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+
+#include "tslib.h"
+#include "tslib-filter.h"
+
+struct tslib_skip {
+	struct tslib_module_info module;
+
+	int nhead;
+	int N;
+
+	int ntail;
+	int M;
+	int MM;
+	struct ts_sample *buf;
+	int sent;
+};
+
+static void reset_skip(struct tslib_skip *s)
+{
+	s->N = 0;
+	s->M = 0;
+	s->MM = 0;
+	s->sent = 0;
+}
+
+static int skip_read(struct tslib_module_info *info, struct ts_sample *samp,
+		     int nr)
+{
+	struct tslib_skip *skip = (struct tslib_skip *)info;
+	int nread = 0;
+
+	while (nread < nr) {
+		struct ts_sample cur;
+
+		if (info->next->ops->read(info->next, &cur, 1) < 1)
+			return nread;
+
+		/* skip the first N samples */
+		if (skip->N < skip->nhead) {
+			skip->N++;
+			continue;
+		}
+
+		/* We didn't send UP -- Ignore DOWN */
+		if (cur.pressure == 0 && skip->sent == 0) {
+			reset_skip(skip);
+			continue;
+		}
+
+		/* Just accept the sample if ntail is zero */
+		if (skip->ntail == 0) {
+			samp[nread++] = cur;
+			skip->sent = 1;
+			continue;
+		}
+
+		/* ntail > 0,  Queue current point if we need to */
+		if (skip->M < skip->ntail) {
+			skip->buf[skip->M++] = cur;
+			continue;
+		}
+
+		/* queue full, accept one, queue one */
+
+		if (cur.pressure == 0)
+			skip->buf[skip->MM].pressure = 0;
+
+		samp[nread++] = skip->buf[skip->MM];
+
+#ifdef DEBUG
+		fprintf(stderr, "skip---> (X:%d Y:%d) pressure:%d\n",
+			skip->buf[skip->MM].x, skip->buf[skip->MM].y,
+			skip->buf[skip->MM].pressure);
+#endif
+
+		if (cur.pressure == 0) {
+			reset_skip(skip);
+		} else {
+			skip->buf[skip->MM++] = cur;
+			if (skip->MM >= skip->ntail)
+				skip->MM = 0;
+			skip->sent = 1;
+		}
+	}
+
+	return nread;
+}
+
+static int skip_fini(struct tslib_module_info *info)
+{
+	struct tslib_skip *skip = (struct tslib_skip *)info;
+
+	if (skip->buf)
+		free(skip->buf);
+
+	free(info);
+
+        return 0;
+}
+
+static const struct tslib_ops skip_ops =
+{
+	.read	= skip_read,
+	.fini	= skip_fini,
+};
+
+static int skip_opt(struct tslib_module_info *inf, char *str, void *data)
+{
+	struct tslib_skip *skip = (struct tslib_skip *)inf;
+	unsigned long v;
+	int err = errno;
+
+	v = strtoul(str, NULL, 0);
+
+	if (v == ULONG_MAX && errno == ERANGE)
+		return -1;
+
+	errno = err;
+
+	switch ((int)data) {
+	case 1:
+		skip->nhead = v;
+		break;
+
+	case 2:
+		skip->ntail = v;
+		break;
+
+	default:
+		return -1;
+	}
+	return 0;
+}
+
+static const struct tslib_vars skip_vars[] =
+{
+	{ "nhead",	(void *)1, skip_opt },
+	{ "ntail",	(void *)2, skip_opt },
+};
+
+#define NR_VARS (sizeof(skip_vars) / sizeof(skip_vars[0]))
+
+TSAPI struct tslib_module_info *mod_init(struct tsdev *dev, const char *params)
+{
+	struct tslib_skip *skip;
+
+	if (!(skip = malloc(sizeof(struct tslib_skip))))
+		return NULL;
+
+	skip->module.ops = &skip_ops;
+
+	skip->nhead = 1; /* by default remove the first */
+	skip->ntail = 1; /* by default remove the last */
+	skip->buf = NULL;
+
+	reset_skip(skip);
+
+	if (tslib_parse_vars(&skip->module, skip_vars, NR_VARS, params)) {
+		free(skip);
+		return NULL;
+	}
+	
+	if (skip->ntail &&
+	    !(skip->buf = malloc(sizeof(struct ts_sample) * skip->ntail))) {
+		free(skip);
+		return NULL;
+	}
+
+	return &skip->module;
+}
Index: plugins/Makefile.am
===================================================================
--- plugins/Makefile.am	(revision 70)
+++ plugins/Makefile.am	(working copy)
@@ -43,6 +43,12 @@
 PTHRES_MODULE =
 endif
 
+if ENABLE_SKIP_MODULE
+SKIP_MODULE = skip.la
+else
+SKIP_MODULE =
+endif
+
 if ENABLE_UCB1X00_MODULE
 UCB1X00_MODULE = ucb1x00.la
 else
@@ -102,6 +108,7 @@
 	$(DEJITTER_MODULE) \
 	$(VARIANCE_MODULE) \
 	$(PTHRES_MODULE) \
+	$(SKIP_MODULE) \
 	$(UCB1X00_MODULE) \
 	$(CORGI_MODULE) \
 	$(COLLIE_MODULE) \
@@ -128,6 +135,10 @@
 pthres_la_LDFLAGS	= -module $(LTVSN)
 pthres_la_LIBADD	= $(top_builddir)/src/libts.la
 
+skip_la_SOURCES	= skip.c
+skip_la_LDFLAGS	= -module $(LTVSN)
+pthres_la_LIBADD	= $(top_builddir)/src/libts.la
+
 # hw access
 corgi_la_SOURCES	= corgi-raw.c
 corgi_la_LDFLAGS	= -module $(LTVSN)
Index: configure.ac
===================================================================
--- configure.ac	(revision 70)
+++ configure.ac	(working copy)
@@ -96,6 +96,14 @@
 AC_MSG_RESULT($pthres_module)
 AM_CONDITIONAL(ENABLE_PTHRES_MODULE, test "$pthres_module" = "yes")
 
+AC_MSG_CHECKING([whether skip module is requested])
+AC_ARG_ENABLE(skip,
+	AS_HELP_STRING([--enable-skip],
+		[Enable building of skip filter (default=yes)]),
+	[skip_module=$enableval],
+	[skip_module=yes])
+AC_MSG_RESULT($skip_module)
+AM_CONDITIONAL(ENABLE_SKIP_MODULE, test "$skip_module" = "yes")
 
 # hardware access modules
 AC_MSG_CHECKING([whether ucb1x00 module is requested])

